<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="check">
    <title>代码分析</title>

    <sect1>
        <title>代码分析</title>
        <para>大体分成三方面</para>
        <sect2>
            <title>静态检测</title>
            <para>checkstyle检查源代码的编码风格，检查javadoc是否完整，缩进，空格是否一致。用来检查大家是否遵循同一种编码规范。</para>
            <para>pmd和cpd检测无用和重复的代码。</para>
            <para>javaNCSS统计有效代码行数。</para>
            <para>taglist统计代码中的TODO标记。</para>
        </sect2>
        <sect2>
            <title>动态检测</title>
            <para>findbugs是检查编译后的class是否存在隐性bug，包括无用代码，不好的实践等等。</para>
        </sect2>
        <sect2>
            <title>关联分析</title>
            <para>cobertura用来统计测试覆盖率。</para>
            <para>jdepend用来检验代码依赖和复杂度。报表中可以显示当前代码都与哪些包关联。</para>
        </sect2>
        <para>还有把这些分析都制作成报表的dashboard，生成项目依赖图的overview，统计svn的statSVN。</para>
    </sect1>

    <sect1>
        <title>checkstyle</title>
        <para><ulink url="http://checkstyle.sf.net"/></para>
        <para>Checkstyle用来检测编码规范，主要用于静态检测</para>
        <para>默认情况下使用的是sun指定的编码规范，也可以指定自己的编码规则</para>
    </sect1>

    <sect1>
        <title>PMD and CPD</title>
        <para><ulink url="http://pmd.sf.net"/></para>
        <para>PMD用来检测代码缺陷，比如可能出现的问题，没有使用的代码，需要优化的代码，重复的条件，重复的代码</para>
        <para>CPD（the Copy/Paste Detector）可以列出文件中使用“复制、粘贴”造成的重复代码</para>
        <para>两者主要用于静态检测，pmd完全没有findbugs好用，所以检测代码缺陷基本还是用findbugs，主要使用CPD统计重复代码</para>
    </sect1>

    <sect1>
        <title>javaNCSS</title>
        <para><ulink url="http://www.kclee.de/clemens/java/javancss/"/></para>
        <para>javaNCSS(Non Commenting Source Statements )</para>
        <para>JavaNCSS可以计算出java文件中的有效代码行数，顺便也算出类的数量，方法的数量，注释的数量，注释的行数</para>
    </sect1>

    <sect1>
        <title>taglist</title>
        <para><ulink url="http://mojo.codehaus.org/taglist-maven-plugin/"/></para>
        <para>Taglist是一个maven2的插件，不能独立使用</para>
        <para>Taglist可以统计代码中@todo,TODO,fixme等标签的数量，并显示对应的注释说明</para>
    </sect1>

    <sect1>
        <title>findbugs</title>
        <para><ulink url="http://findbugs.sf.net"/></para>
        <para>Findbugs可以用于检测class的缺陷，它属于动态检测，可以在官方网站看到findbugs 支持的缺陷列表</para>
        <para>经常使用findbugs可以提高自己书写代码的质量</para>
    </sect1>

    <sect1>
        <title>cobertura</title>
        <para><ulink url="http://cobertura.sf.net"/></para>
        <para>Cobertura可以计算代码的测试覆盖率，让我们知道还有哪些代码是没测试过的</para>
        <para>感觉功能与clover已经很接近了，而且配置也更加方便。</para>
    </sect1>

    <sect1>
        <title>jdepend</title>
        <para><ulink url="http://clarkware.com/software/JDepend.html"/></para>
        <para>Jdepend可以计算package的抽象度和依赖度</para>
        <para>这个东西暂时还不会看，它的报表了有一大堆的统计数字</para>
        <para>据说一个理想的包是：完全抽象的（A=1），非常稳定的（I=0），这时D=0；或者是：完全具体类构成的包（A=0），非常不稳定的（I=1），这时同样也有D=0。D=0说明包的抽象程度与稳定程度是平衡的，反之D=1说明包的平衡程度被严重破坏。 </para>
    </sect1>

    <sect1>
        <title>JDepend：管理代码依赖性<emphasis>（待研究）</emphasis></title>
        <para>JDepend遍历所有的Java代码目录，自动生成每个Package的依赖性度量。对于可扩展性、可重用性和可管理性，JDepend可自动度量一个设计在以上三个方面的质量。</para>
        <para>JDepend为每个Package自动生成的依赖性度量指标，包括：</para>
        <orderedlist>
            <listitem>
                <para>Number of Classes (Cc)</para>
                <para>被分析package的具体和抽象类（和接口）的数量，用于衡量package的可扩展性。</para>
            </listitem>
            <listitem>
                <para>Afferent Couplings (Ca)</para>
                <para>依赖于被分析package的其他package的数量，用于衡量pacakge的职责。</para>
            </listitem>
            <listitem>
                <para>Efferent Couplings (Ce)</para>
                <para>被分析package的类所依赖的其他package的数量，用于衡量package的独立性。</para>
            </listitem>
            <listitem>
                <para>Abstractness (A)</para>
                <para>被分析package中的抽象类和接口与所在package所有类数量的比例，取值范围为0－1。</para>
            </listitem>
            <listitem>
                <para>Instability (I)</para>
                <para>I＝Ce/（Ce＋Ca），用于衡量package的不稳定性，取值范围为0－1。I＝0表示最稳定，I＝1表示最不稳定。</para>
            </listitem>
            <listitem>
                <para>Distance (D)</para>
                <para>被分析package和理想曲线A＋I＝1的垂直距离，用于衡量package在稳定性和抽象性之间的平衡。理想的package要么完全是抽象类和稳定（x＝0，y＝1），要么完全是具体类和不稳定（x＝1，y＝0）。</para>
                <para>取值范围为0－1，D＝0表示完全符合理想标准，D＝1表示package最大程度地偏离了理想标准。</para>
            </listitem>
        </orderedlist>
        <para>为什么使用JDepend</para>
        <orderedlist>
            <listitem>
                <para>评价设计质量</para>
            </listitem>
            <listitem>
                <para>翻转依赖性</para>
            </listitem>
            <listitem>
                <para>支持并行开发和极限编程</para>
            </listitem>
            <listitem>
                <para>独立的发布模块</para>
            </listitem>
            <listitem>
                <para>识别package的循环依赖</para>
            </listitem>
        </orderedlist>
    </sect1>

    <sect1>
        <title>编码规范与代码质量检查</title>
        <sect2>
            <title>Java编码规范</title>
            <para>基于sun定义的Java编码规范</para>
        </sect2>
        <sect2>
            <title>Eclipse代码格式与规范</title>
            <para>统一Code format,Cleanup,Warning规则</para>
            <para>导入cleanup-profile.xml和formatter.xml 到eclipse中。</para>
            <para>经常性执行cleaup命令执行规则(对源码目录右键->source->cleanup)</para>
        </sect2>
        <sect2>
            <title>Checkstyle</title>
            <para>安装Eclipse-CS插件，导入springside3.0/tools/configures/checkstyle/springside_checks.xml ，并设为Default。</para>
            <para>经常性的对项目执行checkstyle check，并在修改完毕后执行clean清除无需修改的提示。</para>
        </sect2>
        <sect2>
            <title>PMD</title>
            <para>安装PMD插件，导入ruleset.xml</para>
            <para>经常性的对项目执行PMD check，并在修改完毕后执行clean清除无需修改的提示。</para>
        </sect2>
    </sect1>

</chapter>


