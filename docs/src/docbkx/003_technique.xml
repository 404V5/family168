<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="technique">
    <title>技术选型</title>
    <sect1>
        <title>基础架构</title>
        <orderedlist>
            <listitem>
                <para><emphasis>IOC Container:</emphasis> <ulink url="http://www.springframework.org/">Spring</ulink>, Guice</para>
                <para>我们需要IOC Container的依赖注入作为胶水，把其他工具包粘在一起。还需要它的AOP，进行事务配置，权限管理。</para>
                <para>这么多人都在使用<ulink url="http://www.springframework.org/">Spring</ulink>，实际使用中可以获得巨大的便利，如果选择了其他平台就要面临在关键时刻自己造轮子的窘境。使用<ulink url="http://www.springframework.org/">Spring</ulink>的实际经验更长，方便与其他组件整合。</para>
                <para>Guice是由Google出品的，又使用了JDK5中的注解功能，问题是以后是否能得到很好的支持。</para>
            </listitem>
            <listitem>
                <para><emphasis>MVC:</emphasis> struts2, struts, JSF, RESTful Framework, SpringMVC</para>
                <para>struts2比struts好用，在了解了OGNL的用法后，还是比较方便的。</para>
                <para>struts毕竟还是老掉牙了。</para>
                <para>JSF好复杂，没有IDE的支持基本没法用，看不清方向。</para>
                <para>RESTfull Framework感觉太草率，有前途吗。</para>
                <para>springmvc现在默认不包含在spring包中了，它的功能太简陋，有些新功能华而不实。</para>
            </listitem>
            <listitem>
                <para><emphasis>ORM:</emphasis> <ulink url="http://www.hibernate.org/">Hibernate</ulink>, JPA, iBatis, JDBC</para>
                <para>作为ORM方案，使用<ulink url="http://www.hibernate.org/">hibernate3</ulink>对JPA的支持，使用annotation简化配置。</para>
                <para><ulink url="http://www.hibernate.org/">Hibernate</ulink>用起来比较熟，支持多数据库，简化了数据库的操作，目前把所有调优的希望都放在二级缓存上了。</para>
                <para>JPA对于规范不太了解。</para>
                <para>iBatis据称是对JDBC的最简封装，但是与hibernate有太多的区别。</para>
                <para>JDBC根本没进行封装，用起来风险太高。使用封装的框架更容易统一开发。</para>
            </listitem>
            <listitem>
                <para><emphasis>View:</emphasis> JSP-2.0, Freemarker, Velocity</para>
                <para>严重偏向Freemarker，易用性，扩展性，自定义宏，还可以用在不支持JSP-2.0的服务器上，而且还可以与struts2配合。可是Freemarker并没有合适IDE配合，而且能够熟练使用的程序员也不多。</para>
                <para>JSP-2.0功能明显不足，限制太多，不容易扩展，必须和taglib配合才能对付实际中的工作，taglib又太难写。</para>
                <para>Velocity功能不如Freemarker。</para>
            </listitem>
            <listitem>
                <para><emphasis>Security:</emphasis> <ulink url="http://acegisecurity.org/">Spring Security</ulink>, jsecurity, struts menu</para>
                <para>Spring Security作为acegi的升级版本，更易用了，与<ulink url="http://www.springframework.org/">spring</ulink>整合在一起，控制权限。</para>
                <para>jsecurity作为apache孵化器里的项目，有人对它进行了强烈推荐。</para>
                <para>是否还考虑基于struts menu写一套自定义的菜单？</para>
            </listitem>
            <listitem>
                <para><emphasis>Ajax Widgets:</emphasis> <ulink url="http://extjs.com">ExtJS</ulink>, Dojo, YUI, JQuery-UI</para>
                <para><ulink url="http://extjs.com">ExtJS</ulink>轻便，好用，漂亮，功能强大。只是协议有问题。</para>
                <para>Dojo笨重，难看，都不知道怎么用。</para>
                <para>YUI是<ulink url="http://extjs.com">ExtJS</ulink>的原型，但是封装没有<ulink url="http://extjs.com">ExtJS</ulink>好。</para>
                <para>JQuery-UI还很青涩。</para>
                <para>如果不使用上述这类统一组件库，还可以选择jsCalendar这个日期选择组件，FckEditor和Tiny_mce都是富文本编辑器。据说专业人士喜欢用FckEditor，喜欢漂亮的都喜欢用Tiny_mce。JavaScriptTemplate可以批量生成HTML。和DWR结合实现上传进度条等功能。</para>
            </listitem>
            <listitem>
                <para><emphasis>JS Function Lib:</emphasis> Prototypejs, JQuery, Mootools</para>
                <para>Prototypejs最老。对应的扩展主要有Script.Aculo.us。</para>
                <para>JQuery有强力的查询能力。对应的扩展容易找到。</para>
                <para>Mootools被fin强烈推荐，说OO封装做得很好，但感觉扩展组件不丰富。</para>
            </listitem>
            <listitem>
                <para><emphasis>JSON:</emphasis> <ulink url="http://www.getahead.ltd.uk/dwr/">DWR</ulink>, <ulink url="http://json-lib.sourceforge.net/">json-lib</ulink></para>
                <para>使用<ulink url="http://www.getahead.ltd.uk/dwr/">dwr</ulink>和 <ulink url="http://commons.apache.org">commmons-fileupload</ulink>制作上传文件的进度条。</para>
                <para>考虑使用<ulink url="http://www.getahead.ltd.uk/dwr/">dwr-2</ulink>的服务器推，制作在线聊天。</para>
                <para>与服务器之间交互采用json格式传递数据，目前采用的<ulink url="http://json-lib.sourceforge.net/">json-lib</ulink>在处理循环引用的时候需要特别设置，否则在处理<ulink url="http://www.hibernate.org/">hibernate</ulink>双向关联的时候100%出错。</para>
            </listitem>
        </orderedlist>
    </sect1>
    <sect1>
        <title>扩展架构</title>
        <para>在基础架构上进行的扩展，实现特定功能的工具：</para>
        <orderedlist>
            <listitem>
                <para><emphasis>WebService:</emphasis> <ulink url="http://incubator.apache.org/cxf/">CXF</ulink>, XFire, <ulink url="http://ws.apache.org/axis2/">Axis-2</ulink></para>
                <para><ulink url="http://ws.apache.org/axis2/">Axis-2</ulink>总感觉很笨重，而且不容易和<ulink url="http://www.springframework.org">Spring</ulink>结合。</para>
                <para>XFire已经停止开发，后来与Celtix合并为apache中的新项目<ulink url="http://incubator.apache.org/cxf/">CXF</ulink>。</para>
                <para><ulink url="http://incubator.apache.org/cxf/">CXF</ulink>是由Objectweb Celtix和Codehaus XFire合并成立的。与<ulink url="http://ws.apache.org/axis/">Axis1</ulink>~<ulink url="http://ws.apache.org/axis2/">2</ulink>比较，更易于整合到<ulink url="http://www.springframework.org">Spring</ulink>中。而且据说支持JAX-WS。不过不知道JAX-WS是干啥的。</para>
            </listitem>
            <listitem>
                <para><emphasis>工作流:</emphasis> <ulink url="http://jboss.org/">Jbpm-3</ulink>, <ulink url="http://jboss.org/">Jbpm-4</ulink>, <ulink url="http://opensymphony.com/osworkflow/">Osworkflow</ulink></para>
                <para><ulink url="http://jboss.org/">Jbpm-3</ulink>是开源中比较火的框架了。但是spring-module-jbpm31封装的有问题，单元测试会报异常。</para>
                <para><ulink url="http://jboss.org/">Jbpm-4</ulink>太新，还是alpha版，而且改动太大了。</para>
                <para><ulink url="http://opensymphony.com/osworkflow/">Osworkflow</ulink>，号称最灵活的工作流引擎，据说所有实现都要自己写代码。</para>
                <para>两者都支持<ulink url="http://www.hibernate.org/">Hibernate</ulink>。</para>
            </listitem>
            <listitem>
                <para><emphasis>规则引擎:</emphasis> drools</para>
                <para>据说是很轻量级的，拥有平民语法的规则引擎。</para>
            </listitem>
            <listitem>
                <para><emphasis>Search Engine:</emphasis> <ulink url="http://hibernate.org/410.html">Hibernate-search</ulink>, <ulink url="http://opensymphony.com/compass/">Compass</ulink>, <ulink url="http://lucene.apache.org/">Lucence</ulink></para>
                <para><ulink url="http://opensymphony.com/compass/">Compass</ulink>同另外一个<ulink url="http://hibernate.org/410.html">Hibernate-search</ulink>都是基于<ulink url="http://lucene.apache.org/">Lucence</ulink>，对数据库的全文搜索引擎。</para>
                <para><ulink url="http://opensymphony.com/compass/">Compass</ulink>开发的时间更长一些。<ulink url="http://hibernate.org/410.html">Hibernate-search</ulink>出现的时间还比较短，会用的人少，不知道前途如何。如果两者都不符合，还要考虑自己直接操作<ulink url="http://lucene.apache.org/">Lucence</ulink>。</para>
                <para>之前使用过<ulink url="http://opensymphony.com/compass/">Compass</ulink>，在单元测试的时候会出现内存溢出的问题。</para>
            </listitem>
            <listitem>
                <para><emphasis>报表:</emphasis> <ulink url="http://jasperforge.org/sf/projects/jasperreports">JasperReport</ulink>, BIRT, 自定义</para>
                <para><ulink url="http://jasperforge.org/sf/projects/jasperreports">JasperReport</ulink>负责文本报表，<ulink url="www.jfree.org/jfreechart/">JFreeChat</ulink>图形报表。</para>
                <para>虽然没使用过JasperReport，但已经听到过太多其他人对它的怨言了。</para>
                <para>BIRT没有想像中那样好用，依赖那些eclipse中的包，显得太大了。</para>
                <para>因为东西方习惯差异，自定义属于自己的一套报表应该可以解决国内很多问题。首选答案竟然是手写PDF和<ulink url="www.jfree.org/jfreechart/">JFreeChat</ulink>结合生成图表。</para>
            </listitem>
            <listitem>
                <para><emphasis>JMS:</emphasis> <ulink url="http://activemq.apache.org/">ActiveMQ</ulink>, Jencks, Lingo</para>
                <para><ulink url="http://activemq.apache.org/">ActiveMQ</ulink>是很多人推荐使用的JMS框架。</para>
                <para>Jencks是一个JCA平台，可以提供J2EE里的资源容器。</para>
                <para>Lingo据说可以把JMS封装成POJO。</para>
            </listitem>
            <listitem>
                <para><emphasis>定时调度:</emphasis> <ulink url="http://opensymphony.com/quartz/">Quartz</ulink>, java.util.Timer</para>
                <para>据说<ulink url="http://opensymphony.com/quartz/">Quartz</ulink>是唯一免费的解决方式。这个组件放到web.xml里，可能造成内存泄露。robbin认为这种定时任务不应该和项目绑定在一起，而是应该建立一个单独的任务服务器。</para>
                <para>如果是简单功能，也可以用JDK自带的Timer。</para>
            </listitem>
            <listitem>
                <para><emphasis>Cluster Cache:</emphasis> Open Terracotta</para>
                <para>被许多公司使用，据说是很强大的分布集群策略。</para>
            </listitem>
            <listitem>
                <para><emphasis>JMX:</emphasis> Spring封装，MX4j</para>
                <para>Java管理扩展，给人的感觉像是RMI一类的远程调用。</para>
            </listitem>
            <listitem>
                <para><emphasis>OSGI:</emphasis> equinox, felix</para>
                <para>有点儿反感equinox的笨重，而且equinox是否能和eclipse分离呢？能否独立使用呢？能否能嵌入自己的项目呢？</para>
                <para>felix是apache的项目，而且有maven插件，但是看了源代码之后，感觉太不成熟了。</para>
            </listitem>
            <listitem>
                <para><emphasis>动态语言:</emphasis> bsh, groovy, jruby, jython, rhino</para>
                <para>bsh最简单，而且都是java语法，功能也不多。</para>
                <para>rhino只是解析js，也没什么特别功能。</para>
                <para>groovy被期许了很大的希望，受到多方支持，有为数不少的组件，值得考虑一下。</para>
                <para>jruby和jython的话，语法和java相差太大了，基本等于再学一门语言。</para>
            </listitem>
        </orderedlist>
    </sect1>
    <sect1>
        <title>开发环境</title>
        <orderedlist>
            <listitem>
                <para><emphasis>JDK:</emphasis> 5.0, 1.4, 6.0</para>
                <para>5.0的那些特性还是很好用的，而且可以使用<ulink url="http://retrotranslator.sourceforge.net/">Retrotranslator</ulink>把5.0编译的class转换成可以在1.4下运行的class。</para>
                <para>推荐使用JRockit-27.2，据说可以解决sun jdk的perm gen内存不足问题。</para>
                <para>6.0有点儿新了，怕出问题。</para>
            </listitem>
            <listitem>
                <para>Servlet Container: <ulink url="http://tomcat.apache.org/">Tomcat-5.5</ulink>, Weblogic-9/10, Jboss, Geromino, <ulink url="http://tomcat.apache.org/">Tomcat-6.0</ulink>, Glassfish, <ulink url="http://jetty.mortbay.com/">Jetty</ulink>, Resin</para>
                <para>一般人还是用Tomcat-5.5，据说Tomcat-6.0支持OSGI了而且运行方式跟之前都不同了。</para>
                <para><ulink url="http://jetty.mortbay.com/">Jetty</ulink>还是用在集成测试中。</para>
                <para>之后的迭代里，应该兼容Weblogic, Jboss, Geromino, Glassfish。</para>
            </listitem>
            <listitem>
                <para>数据库: Hsqldb, Mysql, H2database, Derby, Oracle, SQLServer</para>
                <para>采用<ulink url="http://hsqldb.org">hsqldb</ulink>作为嵌入式数据库，可与工程绑定发布，用户下载体验版后不需要额外安装数据库，减少了配置出错的机会。</para>
                <para>考虑H2database和Derby，似乎H2功能更强力，Derby出身名门但是不支持commit是个问题。</para>
                <para>Mysql是必须要支持的，因为是免费中使用特别广的。</para>
                <para>SQLServer也是国内很多地方使用的中型数据库。</para>
                <para>Oracle有很多人迷信，的确也是非常常用的大型数据库。</para>
                <para>Hibernate本身支持多数据库，包括Mysql, SQLServer, Oracle等，未来替换成企业数据库也不是问题。</para>
            </listitem>
        </orderedlist>
    </sect1>
    <sect1>
        <title>测试工具</title>
        <orderedlist>
            <listitem>
                <para><emphasis>单元测试:</emphasis> <ulink url="http://junit.org/">JUnit-3</ulink>, <ulink url="http://junit.org/">JUnit-4</ulink>, TestNG</para>
                <para><ulink url="http://junit.org/">JUnit-3</ulink>。经典单元测试工具，应用很广，基本所有工具都支持。</para>
                <para><ulink url="http://junit.org/">JUnit-4</ulink>有点儿新，新功能不太清楚。</para>
                <para>TestNG据说很厉害，但不太熟悉。</para>
                <para>js的单元测试工具 <ulink url="http://www.jsunit.net">jsunit</ulink>不知如何应用。</para>
            </listitem>
            <listitem>
                <para><emphasis>Mock:</emphasis> <ulink url="www.easymock.org/">EasyMock</ulink>, JMock, <ulink url="http://www.springframework.org/">Spring-test</ulink></para>
                <para><ulink url="www.easymock.org/">EasyMock</ulink>是老牌了，不需要继承特定的超类。</para>
                <para>JMock需要继承特定超类，属于新框架。</para>
                <para><ulink url="http://www.springframework.org/">Spring-test</ulink>里提供了很多对付servlet里接口的测试类。它还提供了许多常用的测试基类，可以缓存xml配置并支持事务。</para>
            </listitem>
            <listitem>
                <para><emphasis>测试覆盖率:</emphasis> <ulink url="http://cobertura.sourceforge.net/">Cobertura</ulink>, <ulink url="http://www.atlassian.com/software/clover/">Clover</ulink></para>
                <para><ulink url="http://cobertura.sourceforge.net/">Cobertura</ulink>发展至今，界面和功能已经接近<ulink url="http://www.atlassian.com/software/clover/">Clover</ulink>了，开源并且没有古怪的协议约束，<ulink url="http://maven.apache.org">Maven2</ulink>上的配置也比<ulink url="http://www.atlassian.com/software/clover/">Clover</ulink>更简便。</para>
            </listitem>
            <listitem>
                <para><emphasis>Web集成测试:</emphasis> <ulink url="http://openqa.org/selenium/">Selenium</ulink></para>
                <para><ulink url="http://openqa.org/selenium/">Selenium</ulink>是一款被众口称赞的集成测试工具，使用Firefox的插件录制测试，然后可以翻译成多种平台语言进行自动化测试。</para>
                <para>同类产品还有<ulink url="httpunit.sourceforge.net/">httpunit</ulink>和<ulink url="http://jwebunit.sourceforge.net/">jwebunit</ulink>。DBUnit可以帮助维护数据库中测试数据的完整，但是无法处理表间双向外键的情况。</para>
                <para>可以使用<ulink url="http://maven.apache.org">Maven2</ulink>插件进行测试，但是问题是一直没有发布1.0，一直只能使用1.0-SNAPSHOT。</para>
            </listitem>
            <listitem>
                <para><emphasis>WebService测试:</emphasis> SOAPUI</para>
                <para>据说是唯一的WebService测试工具。</para>
            </listitem>
            <listitem>
                <para><emphasis>压力测试:</emphasis> <ulink url="http://jakarta.apache.org/jmeter/index.html">JMeter</ulink></para>
                <para><ulink url="http://jakarta.apache.org/jmeter/index.html">JMeter</ulink>听过但是没用过。</para>
            </listitem>
        </orderedlist>
    </sect1>
    <sect1>
        <title>项目管理</title>
        <orderedlist>
            <listitem>
                <para><emphasis>UML:</emphasis> Enterprise Architecture, Rose 2003, Visio, StarUML</para>
                <para>EA不是免费的。</para>
                <para>Rose是名门。</para>
                <para>Visio是画图挺方便。</para>
                <para>StarUML是免费开源方案。</para>
            </listitem>
            <listitem>
                <para><emphasis>项目部署工具:</emphasis> <ulink url="http://maven.apache.org">Maven2</ulink>, Ant</para>
                <para>Ant更灵活，但是对于大规模项目，自己写build.xml再配置所有的插件和各种流程太麻烦了。而且要借助ivy才好管理依赖。</para>
                <para><ulink url="http://maven.apache.org">Maven2</ulink>拥有规范的目录结构和流程体系，拥有更易用的插件，还可以统一管理jar依赖，它支持多种插件，进行自动打包，测试，代码分析，生成报表。。问题是从外网下载依赖的时候受网速影响太大，一旦遇到外网缺失的依赖更是无可奈何，必须搭建内部repo。<ulink url="http://maven.apache.org">Maven2</ulink>的一个问题，在于不知道如何把这么巨大的一个xml文件拆分成多个可以复用的模块。所以也只好采用这种parent的继承关系对所有的依赖和插件进行管理。</para>
            </listitem>
            <listitem>
                <para><emphasis>持续集成:</emphasis> CruiseControl, Hudson</para>
                <para>cc是老牌劲旅，但是界面也太难看了。</para>
                <para>Hudson是日本人写的，界面漂亮，所有配置都可以直接通过界面配置。</para>
            </listitem>
            <listitem>
                <para><emphasis>代码规范:</emphasis> <ulink url="http://jalopy.sourceforge.net/">Jalopy</ulink>, checkstyle</para>
                <para><ulink url="http://jalopy.sourceforge.net/">Jalopy</ulink>用来美化代码，sf.net上的开源项目已经好多年没有更新了，最新的jalopy已经变成了收费的商业项目。不过我们使用几年前的免费项目就足够了。</para>
                <para>把<ulink url="http://checkstyle.sourceforge.net/">Checkstyle</ulink>的规范与<ulink url="http://jalopy.sourceforge.net/">Jalopy</ulink>的美化规范调节一致，就可以放心编写代码了。</para>
            </listitem>
            <listitem>
                <para><emphasis>代码检测:</emphasis> PMD, Findbugs, JavaNCSS, Taglist, Jdepend</para>
                <para><ulink url="http://pmd.sourceforge.net/">PMD, CPD</ulink>帮助我们检测无用的代码和重复的代码。</para>
                <para><ulink url="http://findbugs.sourceforge.net/">Findbugs</ulink>检测代码中的缺陷。</para>
                <para>JavaNCSS计算有效代码行数。</para>
                <para>Taglist统计代码中的特定标记。</para>
                <para>Jdepend用于统计包之间的依赖性。</para>
            </listitem>
            <listitem>
                <para><emphasis>版本控制，缺陷跟踪和WIKI:</emphasis> SVN, JIRA, Confluence</para>
                <para>Subversion作为版本控制工具，JIRA作为缺陷管理，Confluence提供资源库平台。</para>
            </listitem>
            <listitem>
                <para><emphasis>数据库版本控制:</emphasis> <ulink url="http://dbdeploy.com">DBDeploy</ulink></para>
                <para><ulink url="http://dbdeploy.com">DBDeploy</ulink>让数据库脚本也可以实现版本控制。咱们基于dbdeploy扩展的dbside，可以提供db:migrate, db:rollback, db:view等功能。</para>
                <para>使用Hibernate-tools从数据库反向生成领域模型。</para>
            </listitem>
            <listitem>
                <para><emphasis>Web服务器控制:</emphasis> <ulink url="http://cargo.codehaus.org/">Cargo</ulink></para>
                <para>据说可以统一控制各种Web服务器，比如Tomcat, Jboss, Weblogic</para>
            </listitem>
        </orderedlist>
    </sect1>

    <sect1>
        <title>杂项</title>
        <orderedlist>
            <listitem>
                <para>JDK-5.0</para>
            </listitem>
            <listitem>
                <para>公共Utils工具类。</para>
            </listitem>
            <listitem>
                <para>日志。</para>
            </listitem>
            <listitem>
                <para>缓存。</para>
            </listitem>
            <listitem>
                <para>JavaMail。</para>
            </listitem>
            <listitem>
                <para>UTF-8与国际化。</para>
            </listitem>
            <listitem>
                <para>异常处理。</para>
            </listitem>
        </orderedlist>
    </sect1>

</chapter>
